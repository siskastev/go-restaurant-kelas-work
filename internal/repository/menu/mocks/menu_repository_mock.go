// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "go-restaurant-kelas-work/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
)

// MockMenuRepository is a mock of Repository interface.
type MockMenuRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMenuRepositoryMockRecorder
}

// MockMenuRepositoryMockRecorder is the mock recorder for MockMenuRepository.
type MockMenuRepositoryMockRecorder struct {
	mock *MockMenuRepository
}

// NewMockMenuRepository creates a new mock instance.
func NewMockMenuRepository(ctrl *gomock.Controller) *MockMenuRepository {
	mock := &MockMenuRepository{ctrl: ctrl}
	mock.recorder = &MockMenuRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMenuRepository) EXPECT() *MockMenuRepositoryMockRecorder {
	return m.recorder
}

// GetMenuList mocks base method.
func (m *MockMenuRepository) GetMenuList(ctx context.Context, menuType string) ([]model.MenuItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenuList", ctx, menuType)
	ret0, _ := ret[0].([]model.MenuItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenuList indicates an expected call of GetMenuList.
func (mr *MockMenuRepositoryMockRecorder) GetMenuList(ctx, menuType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenuList", reflect.TypeOf((*MockMenuRepository)(nil).GetMenuList), ctx, menuType)
}

// GetMenuOrder mocks base method.
func (m *MockMenuRepository) GetMenuOrder(ctx context.Context, orderCode string) (model.MenuItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenuOrder", ctx, orderCode)
	ret0, _ := ret[0].(model.MenuItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenuOrder indicates an expected call of GetMenuOrder.
func (mr *MockMenuRepositoryMockRecorder) GetMenuOrder(ctx, orderCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenuOrder", reflect.TypeOf((*MockMenuRepository)(nil).GetMenuOrder), ctx, orderCode)
}
